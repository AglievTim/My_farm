import telebot
import sqlite3
from threading import Thread
from time import sleep
from markdown import Markdown
from config import *
from keyboards import *
from animals_in_game import *
from buttons import Buttons
from database import DataBase
from functions import Functions

con = sqlite3.connect(DATA, check_same_thread = False)
bot = telebot.TeleBot(TOKEN)

bt = Buttons()
db = DataBase()
func = Functions()

db.create_table_market_prices()
db.create_table()
db.add_start_prices()

@bot.message_handler(commands = ['start'])
def start_message(message):
	db.add_new_gamer(message.from_user.id, DATA)
	bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ —Ñ–µ—Ä–º–µ.", reply_markup = main)


@bot.message_handler(func = lambda message: message.text == bt.farm)
def farm(message):
	func.information_about_farm(message.chat.id, message.from_user.id)
@bot.message_handler(func = lambda message: message.text == bt.animals)
def shop(message):
	bot.send_message(message.chat.id, 
		
			"*–ö—É–ø–∏—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö*\n\n"
			'–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö.\n'
			'–ñ–∏–≤–æ—Ç–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã,'
			'–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ–æ–±—Ö–∞–¥–∏–º–æ —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º–µ.\n'
			'–°–æ–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ,'
			'–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö '
			'–∏–ª–∏ –∂–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–µ–±–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫.', 
			parse_mode = 'Markdown', reply_markup = inline_buttons_animals

		)
	
@bot.message_handler(func = lambda message: message.text == bt.mart)
def mart(message):
	market_rate = db.take_mart().fetchone()
	bot.send_message(message.chat.id,

			'*–†—ã–Ω–æ–∫*\n\n'
			'–†—ã–Ω–æ–∫ - —ç—Ç–æ —Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞—à–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏, —Ä–µ—Å—É—Ä—Å—ã.\n'
			'–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ –º–µ–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ –ø—è—Ç—å —á–∞—Å–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–∏–º –¥–ª—è –∏–∑–≤–ª—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø—Ä–∏–±—ã–ª–∏!\n'
			'*–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:*\n\n'
			f'ü•ö - {market_rate[0]}\n'
			f'üí≠ - {market_rate[1]}\n'
			f'ü•õ - {market_rate[2]}\n'
			f'ü•© - {market_rate[3]}\n',

			parse_mode = 'Markdown', reply_markup = inline_for_sale_products

		)
@bot.message_handler(func = lambda message: message.text == bt.angar)
def angar(message):
	print("–°–∫–ª–∞–¥")


@bot.callback_query_handler(func=lambda call: True)
def show_animals_shop(call):
	user_id = call.from_user.id
	chat_id = call.message.chat.id
	#–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ
	if call.data == 'buy_animals':
		func.send_description_animal(chat_id, chicken, inline_button_buy_chicken)
		func.send_description_animal(chat_id, sheep, inline_button_buy_sheep)
		func.send_description_animal(chat_id, cow, inline_button_buy_cow)
		func.send_description_animal(chat_id, pig, inline_button_buy_pig)
	#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à—ã "–ö—É–ø–∏—Ç—å" –≤ –º–∞–≥–∞–∑–∏–Ω–µ
	if call.data == 'buy_chicken':
		Thread(target = func.action_after_purchase, args = (chicken, user_id, chat_id,)).start()
	if call.data == 'buy_sheep':
		func.action_after_purchase(sheep, user_id, chat_id)
	if call.data == 'buy_cow':
		func.action_after_purchase(cow, user_id, chat_id)
	if call.data == 'buy_pig':
		func.action_after_purchase(pig, user_id, chat_id)
	if call.data == 'my_animals':
		func.information_about_farm(chat_id, user_id)


Thread(target = func.main).start()


if __name__ == '__main__':
	bot.polling(none_stop = True)

		